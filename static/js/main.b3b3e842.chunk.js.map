{"version":3,"sources":["components/SearchForm/index.js","components/SearchForm/SearchForm.js","pages/LandingPage.js","components/Card/index.js","components/Card/Card.js","components/UserProfile/index.js","components/UserProfile/UserProfile.js","components/Loader/index.js","components/Loader/Loader.js","pages/Resume.js","components/NotFoundPage/index.js","components/NotFoundPage/NotFoundPage.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","props","className","id","type","onChange","handleChange","placeholder","onClick","handleSubmit","value","validationError","Home","state","username","event","setState","target","preventDefault","trim","history","push","this","Component","Card","item","hasLanguages","Object","keys","languages","length","stars","href","url","name","description","map","lang","index","key","style","color","Colors","UserProfile","data","bio","location","company","login","avatar_url","repositories","Link","to","src","alt","repo","Loader","Resume","isFetching","match","params","fetchUserData","userData","fetchUserRepos","userRepos","pathname","user","error","message","response","ok","Error","statusText","status","Promise","reject","json","fetch","then","handleErrors","fetchReposLanguages","all","languages_url","repoLanguages","html_url","stargazers_count","watchers","watchers_count","NotFoundPage","setTimeout","App","Switch","Route","path","component","LandingPage","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b3b3e842.chunk.js","sourcesContent":["import SearchForm from './SearchForm'\n\nexport default SearchForm","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './SearchForm.css'\n\nconst SearchForm = (props) => {\n  return (\n    <form className=\"form\">\n    <input className=\"form__input\" id=\"username\" type=\"text\" onChange={props.handleChange} placeholder=\"type in github username\" />\n    <input className=\"form__input--submit\" type=\"submit\" onClick={props.handleSubmit} value=\"generate\" />\n    { props.validationError ? (\n      <p className=\"input__validation--error\">\n        <i className=\"icon fas fa-exclamation-circle\"></i>\n        username is required\n      </p>\n    ) : null }\n    </form>\n  )\n}\n\nSearchForm.propTypes = {\n  validationError: PropTypes.bool.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  handleSubmit: PropTypes.func.isRequired\n}\n\nexport default SearchForm","import React, { Component } from 'react';\nimport SearchForm from '../components/SearchForm/'\n\nexport default class Home extends Component {\n  state = { \n    username: \"\",\n    validationError: false\n  }\n\n  handleChange = (event) => {\n    this.setState({username: event.target.value})\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    if(this.state.username.trim() !== \"\") {\n      this.props.history.push('/user/'+this.state.username+'/resume')\n    } else {\n      this.setState({ validationError: true })\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"home\">\n        <div className=\"container container--bg-white\">\n            <h2>Github Resume 1.1</h2>\n            <div className=\"description\">\n            <p>Please implement a Javascript one-page-application that lets users build a github resumeÃÅ</p>\n            </div>\n            <br />\n            <div className=\"text--center\">\n              <SearchForm handleSubmit={this.handleSubmit} handleChange={this.handleChange} validationError={this.state.validationError}/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}","import Card from './Card'\n\nexport default Card","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Card.css'\nimport Colors from '../../assets/colors'\n\nconst Card = (props) => {\n  const { item } = props\n  const hasLanguages = Object.keys(item.languages).length === 0 ? false : true\n  return (\n    <div className=\"card\">\n        <i className=\"icon fas fa-star\"></i> {item.stars}\n        <a href={item.url} className=\"link--title\"><h4>{item.name}</h4></a>\n        <p>{item.description}</p>\n        {hasLanguages ? Object.keys(item.languages).map((lang, index) => (\n          <div className=\"chip\" key={index}>\n            <i className=\"icon fas fa-circle\" style={{color: `${Colors[lang]}`}}></i> {lang}\n          </div>\n        )) : (\n          <>\n            <i className=\"icon icon--align-middle fas fa-times-circle\"></i>\n            <span>no language detected</span>\n          </>\n        )}\n    </div>\n  )\n}\n\nCard.propTypes = {\n  item: PropTypes.shape({\n    name: PropTypes.string,\n    stars: PropTypes.number,\n    languages: PropTypes.object,\n    description:PropTypes.string,\n    url: PropTypes.string\n  })\n}\n\nexport default Card","import UserProfile from './UserProfile'\n\nexport default UserProfile","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\nimport Card from '../Card'\n\nimport './UserProfile.css'\n\nconst UserProfile = (props) => {\n  const { username } = props\n  const {name, bio, location, company, login, avatar_url, repositories} = props.data\n\n  return (\n    <div className=\"container container--bg-white\">\n      <Link to=\"/\" className=\"link--back\">\n        <i className=\"icon fas fa-chevron-left fa-2x\"></i>\n      </Link>\n      <div className=\"block--flex\">\n        <div className=\"block__item--flex\">\n          <img className=\"avatar__img\" src={avatar_url} alt=\"avatar\" />\n        </div>\n        <div className=\"block__item--flex\">\n          {name ? (<p><i className=\"icon fas fa-user\"></i> {name}</p>) : null}\n          {login ? <p><i className=\"icon fab fa-github\"></i> {login}</p> : null}\n          {bio ? (<p><i className=\"icon fas fa-book\"></i> {bio}</p>) : null}\n          {location ? (<p><i className=\"icon fas fa-map-marker-alt\"></i>{location}</p>) : null}\n          {company ? (<p><i className=\"icon far fa-building\"></i>{company}</p>) : null}\n        </div>\n      </div>\n      <br />\n      <div className=\"block--flex respositories\">\n        { repositories.length > 0 ? repositories.map((repo, index) => (\n          <Card item={repo} key={index} />\n        )) : (\n          <div className=\"info\">\n            <i className=\"icon fas fa-info-circle\"></i>               \n            <span>{username} does not has any repositories</span>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nUserProfile.propTypes = {\n  data: PropTypes.object.isRequired\n}\n\nexport default UserProfile","import Loader from './Loader'\n\nexport default Loader","import React from 'react'\nimport './Loader.css'\n\nconst Loader = () => {\n  return (\n    <div className=\"container container--bg-white\">\n      <div className=\"loader\"></div>\n    </div>\n  )\n}\n\nexport default Loader","import React, { Component } from 'react'\nimport UserProfile from '../components/UserProfile'\nimport Loader from '../components/Loader';\n\nconst GITHUB_API_USER = 'https://api.github.com/users/';\n\nexport default class Resume extends Component {\n  state = {\n    data: null,\n    isFetching: false\n  }\n\n  async componentDidMount() {\n    const { username } = this.props.match.params\n    this.setState({ isFetching: true })\n\n    try {\n      const userData = await this.fetchUserData(username)\n      const userRepos = await this.fetchUserRepos(username)\n      this.setState({\n        isFetching: false, \n        data: { ...userData, repositories: userRepos }\n      })\n    } catch(err) {\n      this.props.history.push({\n        pathname: '/404',\n        state: { \n          user: this.props.match.params.username,\n          error: err.message\n        }\n      })\n    }\n  }\n\n  handleErrors(response) {\n    if (!response.ok) {\n      var error = new Error(response.statusText || response.status)\n      return Promise.reject(error)\n    }\n    return response.json();\n}\n  \n  fetchUserData(username) {\n      return fetch(GITHUB_API_USER + username)\n      .then(this.handleErrors)\n  }\n  \n  fetchUserRepos(username) {\n    return fetch(GITHUB_API_USER + username + '/repos')\n      .then(this.handleErrors)\n      .then(repositories => this.fetchReposLanguages(repositories))\n  }\n\n  fetchReposLanguages(repositories) {\n    return Promise.all(repositories.map(repo =>\n      fetch(repo.languages_url)\n      .then(this.handleErrors)\n      .then(repoLanguages => {\n        return {\n          name: repo.name,\n          description: repo.description,\n          url: repo.html_url,\n          languages: repoLanguages,\n          stars: repo.stargazers_count,\n          watchers: repo.watchers_count\n        }\n      })\n    ))\n  }\n\n  render () {\n    const { username } = this.props.match.params\n    const { data, isFetching } = this.state\n\n    if(!isFetching && data) {\n      return (\n        <div id=\"resume\">\n          <UserProfile data={data} username={username} />\n        </div>\n      )\n    } else {\n      return (\n        <Loader />\n      )\n    }\n  }\n}","import NotFoundPage from './NotFoundPage'\n\nexport default NotFoundPage","import React from \"react\";\nimport Proptypes from \"prop-types\";\n\nconst NotFoundPage = (props) => {\n  const { location } = props;\n\n  setTimeout(() => {\n    props.history.push(\"/\");\n  }, 1000);\n\n  return (\n    <div id=\"not-found\">\n      <div className=\"container container--bg-white\">\n        <div className=\"text--center \">\n          <i className=\"far fa-meh fa-4x\"></i>\n          <h3>\n            404 - {location && location.state ? location.state.error : \"\"}\n          </h3>\n          <p></p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nNotFoundPage.propTypes = {\n  location: Proptypes.object.isRequired,\n};\n\nexport default NotFoundPage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport LandingPage from \"./pages/LandingPage\";\nimport Resume from \"./pages/Resume\";\nimport NotFoundPage from \"./components/NotFoundPage\";\n\nimport \"./App.css\";\n\nconst App = () => (\n  <Router>\n    <div id=\"app\">\n      <Switch>\n        <Route path=\"/\" component={LandingPage} />\n        <Route path=\"/user/:username/resume\" component={Resume} />\n        <Route component={NotFoundPage} />\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}